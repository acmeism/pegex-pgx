# This is the Pegex grammar for Pegex grammars!

%grammar pegex
%version 0.2.0


grammar: meta_section rule_section

meta_section: ( meta_definition | ~~ )*

rule_section: ( rule_definition | ~~ )*

meta_definition:
    / <PERCENT> <meta_name> <BLANK>+ <meta_value> / | ERROR_meta_definition

rule_definition: rule_start rule_group ( ending | ERROR_rule_ending )

rule_start: / ( <rule_name> ) <BLANK>* <COLON> ~ / | ERROR_rule_start

rule_group: any_group | all_group

all_group: rule_part+ % ~

any_group: <all_group>2+ % / ~ <PIPE> ~ /

rule_part: <rule_item>1-2 % / ~~ ( <PERCENT>{1,2} ) ~~ /

rule_item:
    ERROR_pre_rule_item |
    rule_reference |
    regular_expression |
    bracketed_group |
    whitespace_token |
    error_message |
    ERROR_post_rule_item

rule_reference:
    /
        ( <rule_modifier>? )        # [=!.-+]
            (:                      # foo | <foo>
                ( <rule_name> ) |
                (: <LANGLE> ( <rule_name> ) <RANGLE> )
            )
        ( <rule_quantifier>? )      # [?*+] 2+ 2-3
        (! <BLANK>* <COLON> )       # Avoid parsing 'foo:'
    /                               # as a rule reference.

regular_expression:
    / <SLASH> ( [^ <SLASH> ]* ) <SLASH> /

bracketed_group:
    / ( <group_modifier>? ) <LPAREN> ~ /
    rule_group
    / ~ <RPAREN> ( <rule_quantifier>? ) /

whitespace_token:
    / ( <TILDE>+ ) /

error_message:
    / <GRAVE> ( [^ <GRAVE> <DOS> ]* ) <GRAVE> /

rule_modifier: / [ <BANG> <EQUAL> <PLUS> <DASH> <DOT> ] /

group_modifier: / <DOT> /

rule_quantifier:
    / (:
        [ <STAR> <PLUS> <QMARK> ] |
        <DIGIT>+ (: <DASH><DIGIT>+ | <PLUS>)?
    ) /

meta_name:
    / ( grammar | extends | include | version ) /

meta_value:
    /
        <BLANK>*
        ( [^ <SEMI> <BREAK> ]*? )
        <BLANK>*
        <ending>
    /

rule_name: / <ALPHA> <WORD>* \b /

ending: / ~? (: <BREAK> ~ | <SEMI> ~ | <EOS> ) /

ws: / (: <WS> | <comment> ) /

comment: / <HASH> <ANY>* (: <BREAK> | <EOS> ) /

### Error messages ###

doc_ending: / ~ <EOS> /
illegal_non_modifier_char:   / [^ <WORD> <LPAREN> <RPAREN> <LANGLE> <SLASH> <TILDE> <PIPE> <GRAVE> <WS> ] /
illegal_non_quantifier_char: / [^ <WORD> <LPAREN> <RPAREN> <LANGLE> <SLASH> <TILDE> <PIPE> <GRAVE> <STAR> <PLUS> <QMARK> <BANG> <EQUAL> <PLUS> <DASH> <DOT> <COLON> <SEMI> <WS> ] /

ERROR_meta_definition:    =ERROR_meta_definition_re `Illegal meta rule`
ERROR_meta_definition_re: / <PERCENT> <WORD>+ /

ERROR_rule_start:  !doc_ending `Rule header syntax error`
ERROR_rule_ending: `Rule ending syntax error`

ERROR_pre_rule_item:
    ERROR_pre_rule_reference |
    ERROR_bracketed_group

ERROR_post_rule_item:
    ERROR_post_rule_reference |
    ERROR_regular_expression |
    ERROR_error_message |
    ERROR_separation

# Errors - rule_reference
ERROR_pre_rule_reference:
    ERROR_rule_reference2 |
    ERROR_rule_reference3 |
    ERROR_rule_reference4 |
    ERROR_rule_reference5

ERROR_post_rule_reference:
    ERROR_rule_reference1

ERROR_rule_reference1:    =ERROR_rule_reference1_re `Illegal rule modifier (must be [=!.-+]?)`
ERROR_rule_reference1_re: !rule_modifier
    /
        <illegal_non_modifier_char>
        (: <rule_name> | <LANGLE> <rule_name> <RANGLE> )
        <rule_quantifier>?         # [?*+] 2+ 2-3
        (! <BLANK>* <COLON> )      # Avoid parsing 'foo:'
    /                              # as a rule reference.

ERROR_rule_reference2:    =ERROR_rule_reference2_re `Missing > in rule reference`
ERROR_rule_reference2_re: / <rule_modifier>? <LANGLE> <rule_name> (! <RANGLE> ) /

ERROR_rule_reference3:    =ERROR_rule_reference3_re `Missing < in rule reference`
ERROR_rule_reference3_re: / <rule_modifier>? <rule_name> <RANGLE> /

ERROR_rule_reference4:    =ERROR_rule_reference4_re `Illegal character in rule quantifier`
ERROR_rule_reference4_re:
    /
        <rule_modifier>?
        (: <rule_name> | <LANGLE> <rule_name> <RANGLE> )
        <illegal_non_quantifier_char>
    /

ERROR_rule_reference5:    =ERROR_rule_reference5_re `Unprotected rule name with numeric quantifier; please use <rule>#-# syntax!`
ERROR_rule_reference5_re: / <rule_modifier>? <rule_name> <DASH> /

# Errors - regular_expression
ERROR_regular_expression:    =ERROR_regular_expression_re `Runaway regular expression; no ending slash at EOF`
ERROR_regular_expression_re: / <SLASH> ( [^ <SLASH> ]* ) / doc_ending

# Errors - bracketed_group
ERROR_bracketed_group:
    ERROR_bracketed_group1 |
    ERROR_bracketed_group2 |
    ERROR_bracketed_group3

ERROR_bracketed_group1:    =ERROR_bracketed_group1_re `Illegal group rule modifier (can only use .)`
ERROR_bracketed_group1_re: !group_modifier / <illegal_non_modifier_char> <LPAREN> ~ / rule_group / ~ <RPAREN> /

ERROR_bracketed_group2:    =ERROR_bracketed_group2_re `Runaway rule group; no ending parens at EOF`
ERROR_bracketed_group2_re: / <group_modifier>? <LPAREN> ~ / rule_group doc_ending

ERROR_bracketed_group3:    =ERROR_bracketed_group3_re `Illegal character in group rule quantifier`
ERROR_bracketed_group3_re:
    / <group_modifier>? <LPAREN> ~ /
    rule_group
    / ~ <RPAREN> <illegal_non_quantifier_char> /

# Errors - error_message
ERROR_error_message:
    ERROR_error_message1 |
    ERROR_error_message2

ERROR_error_message1:    =ERROR_error_message1_re `Multi-line error messages not allowed!`
ERROR_error_message1_re: / <GRAVE> [^ <GRAVE> <DOS> ]* [ <DOS> ] [^ <GRAVE> ]* <GRAVE> /

ERROR_error_message2:    =ERROR_error_message2_re `Runaway error message; no ending grave at EOF`
ERROR_error_message2_re: / <GRAVE> [^ <GRAVE> ]* / doc_ending

# Errors - separation
ERROR_separation:
    ERROR_separation1 |
    ERROR_separation2

ERROR_separation1: / (= ~ <PERCENT>{3} ) / `Leading separator form (BOK) no longer supported`
ERROR_separation2: / (= ~ <PERCENT>{1,2} [^ <WS> ] ) / `Illegal characters in separator indicator`
