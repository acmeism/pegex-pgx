---
+top: grammar
all_group:
  +min: 1
  .ref: rule_part
  .sep:
    .rgx: \s*
any_group:
  +min: '2'
  .ref: rule_part
  .sep:
    .rgx: \s*\|\s*
bracketed_group:
  .all:
  - .rgx: ([\.]?)\[\s*
  - .ref: rule_group
  - .rgx: \s*\]((?:[\*\+\?]|[0-9]+(?:\-[0-9]+|\+)?)?)
comment:
  .rgx: (?:[\ \t]*\r?\n|\#.*\r?\n)
error_message:
  .rgx: '`([^`\r\n]*)`'
grammar:
  .all:
  - +min: 0
    -skip: 1
    .ref: comment
  - +min: 1
    .ref: rule_definition
    .sep:
      +eok: 1
      +min: 0
      -skip: 1
      .ref: comment
regular_expression:
  .rgx: /([^/\r\n]*)/
rule_definition:
  .all:
  - .rgx: \s*
  - .ref: rule_name
  - .rgx: '[\ \t]*:\s*'
  - .ref: rule_group
  - .ref: rule_ending
rule_ending:
  .rgx: \s*?(?:\n\s*|;\s*|\z)
rule_group:
  .any:
  - .ref: any_group
  - .ref: all_group
rule_item:
  .any:
  - .ref: rule_reference
  - .ref: regular_expression
  - .ref: bracketed_group
  - .ref: error_message
rule_name:
  .rgx: ([a-zA-Z]\w*)
rule_part:
  +max: '2'
  +min: '1'
  .ref: rule_item
  .sep:
    .rgx: \s*\s(%%?)\s\s*
rule_reference:
  .rgx: ([!=\+\-\.]?)<([a-zA-Z]\w*)>((?:[\*\+\?]|[0-9]+(?:\-[0-9]+|\+)?)?)
